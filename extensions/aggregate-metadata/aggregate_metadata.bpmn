<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_96f6665" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="3.0.0-dev">
  <bpmn:process id="Process_7eoywsx" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_1m8uuib</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="Flow_1m8uuib" sourceRef="StartEvent_1" targetRef="Activity_0xgydrl" />
    <bpmn:endEvent id="Event_1qjj2ic">
      <bpmn:incoming>Flow_0fckrs2</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_0fckrs2" sourceRef="Activity_0xgydrl" targetRef="Event_1qjj2ic" />
    <bpmn:scriptTask id="Activity_0xgydrl">
      <bpmn:incoming>Flow_1m8uuib</bpmn:incoming>
      <bpmn:outgoing>Flow_0fckrs2</bpmn:outgoing>
      <bpmn:script>import sqlalchemy
from sqlalchemy import cast
from sqlalchemy import func
from sqlalchemy.orm import aliased
from spiffworkflow_backend.models.process_instance_metadata import ProcessInstanceMetadataModel
from spiffworkflow_backend.models.process_instance import ProcessInstanceModel
from spiffworkflow_backend.models.db import db


instance_metadata_aliases = {}
final_select_fields = []
final_group_by_fields = []

group_by_array = group_by.split(',') if group_by else []
filter_by_array = filter_by.split(',') if filter_by else []

for group_by_column in group_by_array:
    instance_metadata_alias = aliased(ProcessInstanceMetadataModel)
    instance_metadata_aliases[group_by_column] = instance_metadata_alias
    final_select_fields.append(instance_metadata_alias.value)
    final_group_by_fields.append(instance_metadata_alias.value)

aggregator_table_alias = aliased(ProcessInstanceMetadataModel)
instance_metadata_aliases[aggregator_field] = aggregator_table_alias
if aggregator_type == "sum":
    final_select_fields.append(func.sum(aggregator_table_alias.value))

process_instance_query = (
    db.session.query(*final_select_fields).select_from(ProcessInstanceModel).group_by(*final_group_by_fields)  # type: ignore
      )
      
for filter in filter_by_array:
    instance_metadata_alias = aliased(ProcessInstanceMetadataModel)
    instance_metadata_aliases[filter["field_name"]] = instance_metadata_alias

    conditions = [
        ProcessInstanceModel.id == instance_metadata_alias.process_instance_id,
        instance_metadata_alias.key == filter["field_name"],
    ]

    if filter["operator"] == "equals":
        conditions.append(instance_metadata_alias.value == filter["field_value"])
    elif filter["operator"] == "less_than":
        conditions.append(cast(instance_metadata_alias.value, sqlalchemy.Integer) &lt; filter["field_value"])
    elif filter["operator"] == "greater_than_or_equal":
        conditions.append(cast(instance_metadata_alias.value, sqlalchemy.Integer) &gt;= filter["field_value"])

    process_instance_query = process_instance_query.join(instance_metadata_alias, and_(*conditions))

for group_by_column in group_by_array:
   instance_metadata_alias = instance_metadata_aliases[group_by_column]
   process_instance_query = process_instance_query.join(
       instance_metadata_alias, ProcessInstanceModel.id == instance_metadata_alias.process_instance_id
   ).filter(instance_metadata_alias.key == group_by_column)

process_instance_query = process_instance_query.join(
    aggregator_table_alias, ProcessInstanceModel.id == aggregator_table_alias.process_instance_id
).filter(aggregator_table_alias.key == aggregator_field)
our_aggregation = dict(process_instance_query.all())

del(process_instance_query)
del(instance_metadata_aliases)
del(final_group_by_fields)
del(final_select_fields)
del(aggregator_table_alias)
del(instance_metadata_alias)
del(sqlalchemy)
del(cast)
del(func)
del(aliased)
del(ProcessInstanceMetadataModel)
del(ProcessInstanceModel)
del(db)</bpmn:script>
    </bpmn:scriptTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_7eoywsx">
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="179" y="159" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1qjj2ic_di" bpmnElement="Event_1qjj2ic">
        <dc:Bounds x="422" y="159" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0kufrze_di" bpmnElement="Activity_0xgydrl">
        <dc:Bounds x="270" y="137" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1m8uuib_di" bpmnElement="Flow_1m8uuib">
        <di:waypoint x="215" y="177" />
        <di:waypoint x="270" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fckrs2_di" bpmnElement="Flow_0fckrs2">
        <di:waypoint x="370" y="177" />
        <di:waypoint x="422" y="177" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
